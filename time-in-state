#!/usr/bin/perl
#
# Plugin to monitor CPU frequency scaling via time_in_state
#
# Origional Author: Kamen Naydenov
# Contributors:
#
# Parameters:
#
#       config   (required)
#       autoconf (optional - only used by munin-config)
#

use strict;
use warnings;


my $data_file = '/sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state';

if ($ARGV[0] and $ARGV[0] eq "autoconf") {
  if (-r "$data_file") {
    print "yes\n";
    exit 0;
  } else {
    print $data_file, " not found\n";
    exit 1;
  }
}

my (%cpufreq_stats, $cpufreq, $freq, $total_time, $graphOrder, $firstOne);
&fetch_info;

if ($ARGV[0] and $ARGV[0] eq "config") {
  print 'graph_args --base 1000 -l 0 -u 100', "\n";
  print 'graph_vlabel %', "\n";
  print 'graph_scale no', "\n";
  print 'graph_title CPU scaling statistics', "\n";
  print 'graph_category system', "\n";
  print 'graph_info This graph shows how much time CPU spend in each supported frequency.', "\n";

  foreach $freq (sort { $b <=> $a } keys %cpufreq_stats) {
    $graphOrder .= 'cpu_at_' . $freq . ' ';
    print 'cpu_at_', $freq, '.label ', $freq, "\n";
    print 'cpu_at_', $freq, '.info Time spend using frequency of ', $freq, " Hz \n";
    print 'cpu_at_', $freq, '.min 0', "\n";
    print 'cpu_at_', $freq, '.max 100', "\n";
#     if ($firstOne) {
#       print $freq, ".draw STACK\n";
#     } else {
#       print $freq, ".draw AREA\n";
#     }
#     $firstOne++;
  }
  print 'graph_order ', $graphOrder, "\n";
  exit 0;
}

foreach $cpufreq (sort { $b <=> $a } keys %cpufreq_stats ) {
  my $time_in_percent = $cpufreq_stats{"$cpufreq"} * 100 / $total_time;
  print 'cpu_at_', $cpufreq, '.value ', $time_in_percent, "\n";
}


sub fetch_info {
  open (IN, '<', "$data_file")
    or die "Could not open $data_file for reading: $!";
  while (<IN>) {
    if (/^(\d+)\s+(\d+)\s+/) {
      $cpufreq_stats{"$1"} = $2;
      $total_time += $2;
    }
  }
  close (IN) or die "$!";
}
